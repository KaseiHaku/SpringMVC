<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		    http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- spring mvc 配置扫包：多个包用 , 号分隔，包含子包用 base.* -->
    <context:component-scan base-package="kasei.web.mvc.*" use-default-filters="false">
        <!-- 只包含 Controller 注解注释的类，需要设置 context:component-scan 属性 use-default-filters="false" -->
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Component"/>

        <!-- 不包含 assigned 指定的类 -->
        <context:exclude-filter type="assignable" expression="kasei.web.mvc.controller.ExternalController"/>

        <!-- 不包含以下注解注释的类 -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
    </context:component-scan>


    <!-- 开启 mvc 注解开发模式: conversion-service 属性：用于关联转换器 -->
    <mvc:annotation-driven conversion-service="conversionService"/>

    <!-- 配置自定义转换器 -->
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <!-- 这里是我们自己定义的类型转换器 -->
                <!-- 坑：这里首字母要小写，因为springmvc帮我们创建bean的时候，是以类名首字母小写命名 -->
                <ref bean="string2TimestampConverter"/>
            </set>
        </property>
    </bean>

    <!-- 避免 IE 执行 AJAX 时,返回 JSON 出现下载文件 -->
    <bean id="mappingJacksonHttpMessageConverter"
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=utf-8</value>
            </list>
        </property>
    </bean>

    <!-- 文件上传配置注意:这里申明的 id 必须为 multipartResolver -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver" >
        <property name="maxUploadSize" value="104857600"></property>
        <property name="maxInMemorySize" value="4096" />
        <property name="defaultEncoding" value="UTF-8"></property>
    </bean>


    <!--配置全局拦截器: -->
    <mvc:interceptors>
        <!--多个拦截器,顺序执行 -->
        <mvc:interceptor>
            <mvc:mapping path="/**" /><!-- 表示拦截所有的url，包括子url路径 -->
            <bean class="kasei.web.mvc.interceptor.MyInterceptor"></bean>
        </mvc:interceptor>
        <mvc:interceptor>
            <mvc:mapping path="/**" />
            <bean class="kasei.web.mvc.interceptor.MyInterceptor2"></bean>
        </mvc:interceptor>
    </mvc:interceptors>


    <!-- 配置静态资源位置以及 url Mapping路径 -->
    <!--<mvc:resources location="/WEB-INF/view/html/" mapping="/html/**"/>-->
    <!--<mvc:resources location="/WEB-INF/resource/" mapping="/resource/**"/>-->


    <!-- 配置 html 视图解析器 :不需要配，直接在controller 里面转发或者重定向即可 -->
    <!-- 配置 jsp 视图解析器，注意  InternalResourceViewResolver 视图解析器优先级必须最低，否则其他解析器会被拦截 -->
    <bean id="jspViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.InternalResourceView"/>
        <property name="prefix" value="/WEB-INF/view/jsp/"></property>
        <!-- 严禁配后缀：<property name="suffix" value=".jsp"></property> -->
        <property name="contentType" value="text/html;charset=UTF-8"/>
        <property name="order" value="1"></property><!-- 设置优先级为最低 -->
    </bean>


    <!-- 自定义的全局异常处理器，只要实现HandlerExceptionResolver接口就是全局异常处理器 -->
    <bean class="kasei.web.mvc.globalexceptionhandler.MyExceptionResolver"></bean>


</beans>