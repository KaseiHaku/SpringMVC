高版本 Servlet 容器可以使用代码进行 MVC 配置的原因 {
    1. Servlet 容器启动时，会扫描 classpath 中的所有 jar 包
    2. 寻找 jar 包中的 META-INF/services/javax.servlet.ServletContainerInitializer 文件
    3. 该文件中包含了 javax.servlet.ServletContainerInitializer 接口实现类的全类名
    4. Servlet 容器启动时，会根据这些全类名去调用这些实现类的 onStartup 方法，实现启动时配置
    5. @HandlesTypes 注解可以将 classpath 下的所有指定类型的类，作为参数传递到 ServletContainerInitializer#onStartup 中

    可以在 spring-web-5.2.2.RELEASE.jar 包中，找到以上信息。

    如果项目启动成功，但是仍然报 404 或 MVC 并没有启动，那说明部署的 artifact (war 包) 没有包含项目中引入的第三方 jar 包
}




Mvc IOC Container Hierarchy:
    RootApplicationContext <- WebApplicationContext

Special Bean Types:
    HandlerMapping：
        映射 Request 到 Handler，并包含一系列 Interceptor，
        映射规则根据实现类的不同而不同，
        主要实现类有
            RequestMappingHandlerMapping 映射 @RequestMapping 标记的路径
            SimpleUrlHandlerMapping 映射显式明确注册的 URI 模式

    HandlerAdapter：
        使 DispatcherServlet 调用 Handler 时，不必在乎具体实现

    HandlerExceptionResolver：
        异常处理策略

    ViewResolver：
        机械 Handler 返回的视图映射字符串，并生成 Response 返回

    LocaleResolver, LocaleContextResolver:
        根据 Timezone 提供不同的视图

    ThemeResolver：
        主题配置，个性化定制

    MultipartResolver：
        文件上传解析

    FlashMapManager：
        将请求转发到另一个请求上

Processing:
    1 browser 发送 request 到 servlet 容器
    2 servlet 容器将请求封装成 HttpServletRequest，并根据 request url 将 request 交给匹配的 servlet 处理，例如 DispatcherServlet（可以有多个）
    3 DispatcherServlet 将 WebApplicationContext 作为 request 的一个 attribute 传递给 request, 该 attribute 名为 DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE
    4 DispatcherServlet 从 WebApplicationContext 查找类型为上述特殊类型的 bean，并绑定到 request 上
    5 绑定类型为 LocaleResolver, LocaleContextResolver 的 bean 到 request 的 attribute 中，具体 attribute 的 key 可以查看 DispatcherServlet 的静态字段，跟 WebApplicationContext 绑定类似
    6 绑定类型为 ThemeResolver 的 bean 到 request 的 attribute 中
    6 绑定类型为 MultipartResolver 的 bean 到 request 的 attribute 中
    7 找到所有的 HandlerMapping 遍历查找匹配的 HandlerMethod 生成 Handler 返回，
      在遍历容器中 HandlerAdapter 来获取支持处理当前类型的 Handler 的 HandlerAdapterAdapter，
      执行 HandlerAdapter 获得运行结果
        7.1 如果找到了，那么执行处理
            7.1.1 如果返回的是一个 Mode 类型的实例，那么会找 view
            7.1.2 如果不是，那么说明请求已经 fulfilled，直接返回给 browser
            7.1.3 如果处理过程中抛异常，从 WebApplicationContext 查找类型为 HandlerExceptionResolver 的 bean 进行处理
        7.2 如果找不到


    1. DispatcherServlet 检查 WebApplicationContext 中所有上述的特殊类型的 bean
    2. 如果没有找到，那么会使用 spring-webmvc-5.2.2.RELEASE.jar!/org/springframework/web/servlet/DispatcherServlet.properties 中配置的类作为默认选项

MVC Config：
    DispatcherServlet 会检查 WebApplicationContext 中所有上述特殊类型的 Bean，如果没有则默认使用 DispatcherServlet.properties 指定的
    一般使用 MvcConfig 默认配置就是最好的配置




SpringMVC 执行过程
第一步：发起请求到 DispatcherServlet
第二步：DispatcherServlet 请求 HandlerMapping 根据 xml配置或注解查找 Handler 
第三步： HandlerMapping 向 DispatcherServlet 返回 Handler
第四步：DispatcherServlet 调用 HandlerAdapter 去执行 Handler
第五步：HandlerAdapter 去执行 Handler
第六步：Handler 给 HandlerAdapter 返回一个 ModelAndView
第七步：HandlerAdapter 向 DispatcherServlet 返回 ModelAndView（是 springmvc 框架的一个底层对象）
第八步：DispatcherServlet 请求 View Resolver 解析（根据逻辑视图名解析成真正的视图jsp）
第九步：View Resolver 向 DispatcherServlet 返回view
第十步：DispatcherServlet 进行视图渲染（视图渲染就是将 ModelAndView 数据填充到 request 域）
第十一步：DispatcherServlet 向用户响应结果


SpringMVC 的主要知识点：{
	1 jar 包的导入
	2 web.xml 的配置
	3 springmvc-servlet.xml 的配置
	4 xml 模式开发
	5 anno 模式开发
	6  参数绑定（自定义转换器）  ------------ 学到这里
	7 validation 校验
	8  异常
	9 文件上传
	9 json 交互
	10 RESTful 支持
	11 拦截器
}
