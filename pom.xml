<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <!--引入 spring-boot-starter-parent 作为父项目，主要是为了管理 jar 包版本-->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.4.5</version>
    </parent>
    
    <groupId>kasei.springmvc</groupId>
    <artifactId>SpringMVC</artifactId>
    <version>0.0.1</version>
    <packaging>war</packaging>

    <!-- 
        此处主要定义 spring-boot-starter-parent 版本管理不支持的 jar 包版本
        或者需要采用比 spring-boot-starter-parent 版本更新的 jar 包版本，例如: slf4j.version
    -->
    <properties>
        <java.version>11</java.version>
        <slf4j.version>2.0.0-alpha1</slf4j.version>
        <jetty.version>10.0.2</jetty.version><!-- jetty 11, tomcat 10 使用 jakarta, 不兼容 Spring 5 -->
    </properties>
    
    
    <!--仓库配置-->
    <repositories>
        <!-- 阿里云 maven 仓库 -->
        <repository>
            <id>aliYunRepository</id>
            <name>ali yun maven repository</name>
            <url>https://maven.aliyun.com/repository/central</url>
            <layout>default</layout>
            <releases>
                <enabled>true</enabled>
                <updatePolicy>daily</updatePolicy>
                <checksumPolicy>fail</checksumPolicy>
            </releases>
        </repository>        
    </repositories>
    <pluginRepositories>
        <pluginRepository>
            <id>alfresco</id>
            <name>alfresco repo</name>
            <url>https://artifacts.alfresco.com/nexus/content/repositories/public/</url>
        </pluginRepository>
    </pluginRepositories>

    
    <!-- 当前项目的依赖配置 -->
    <dependencies>
        
        <!--Lombok 依赖-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>
        
        <!--Spring 依赖-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
        </dependency>

        <dependency>
            <groupId>org.hibernate.validator</groupId>
            <artifactId>hibernate-validator</artifactId>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>

        <dependency>
            <groupId>org.freemarker</groupId>
            <artifactId>freemarker</artifactId>
        </dependency>
        
        <!--Servlet 标准：SpringMVC 5 不支持 jakarta.servlet , 部署时最高只能使用 Tomcat9，Tomcat10 就是 jakarta 了 -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <scope>provided</scope>
        </dependency>

        <!--Log -->
        <dependency><!-- 把 jcl 实现的日志输出，重定向到 slf4j -->
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <dependency><!-- 以 log4j2 作为 slf4j 的实现 -->
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j18-impl</artifactId>
        </dependency>
        
        

        <!--Test Interrelated-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
    
    <build>
        <plugins>
            <plugin>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>${jetty.version}</version>
                <configuration>
                    <!-- 
                        EMBED: 跟 Maven 共用一个 JVM
                        FORK: 独立使用一个 JVM
                        EXTERNAL: 外部 Jetty，相当于使用本地安装的 Tomcat
                    -->
                    <deployMode>FORK</deployMode>
                    <!--<httpConnector>-->
                    <!--    <port>8089</port>-->
                    <!--</httpConnector>-->
                    <webApp>
                        <contextPath>/</contextPath>
                        
                    </webApp>
                     <!--jetty jvm 启动参数，坑：不能换行-->
                    <jvmArgs>-Dfile.encoding=UTF-8 -Dorg.eclipse.jetty.LEVEL=INFO -Djetty.http.port=8089 -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005</jvmArgs>
                </configuration>
                <!--插件自身的依赖-->
                <dependencies>
                    <dependency>
                        <groupId>org.apache.logging.log4j</groupId>
                        <artifactId>log4j-slf4j18-impl</artifactId>
                        <version>${log4j2.version}</version>
                    </dependency>
                </dependencies>
            </plugin>
        </plugins>
    </build>

</project>
